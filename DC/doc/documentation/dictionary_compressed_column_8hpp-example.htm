<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="Content-Type" content="text/xhtml;charset=UTF-8"/>
<meta http-equiv="X-UA-Compatible" content="IE=9"/>
<meta name="generator" content="Doxygen 1.8.11"/>
<title>Database Implementation Techniques Programming Task SoSe2015: dictionary_compressed_column.hpp</title>
<link href="tabs.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="jquery.js"></script>
<script type="text/javascript" src="dynsections.js"></script>
<link href="search/search.css" rel="stylesheet" type="text/css"/>
<script type="text/javascript" src="search/searchdata.js"></script>
<script type="text/javascript" src="search/search.js"></script>
<script type="text/javascript">
  $(document).ready(function() { init_search(); });
</script>
<link href="doxygen.css" rel="stylesheet" type="text/css" />
</head>
<body>
<div id="top"><!-- do not remove this div, it is closed by doxygen! -->
<div id="titlearea">
<table cellspacing="0" cellpadding="0">
 <tbody>
 <tr style="height: 56px;">
  <td id="projectalign" style="padding-left: 0.5em;">
   <div id="projectname">Database Implementation Techniques Programming Task SoSe2015
   </div>
   <div id="projectbrief">DB2 Programming Task SoSe2015</div>
  </td>
 </tr>
 </tbody>
</table>
</div>
<!-- end header part -->
<!-- Generated by Doxygen 1.8.11 -->
<script type="text/javascript">
var searchBox = new SearchBox("searchBox", "search",false,'Search');
</script>
  <div id="navrow1" class="tabs">
    <ul class="tablist">
      <li><a href="index.htm"><span>Main&#160;Page</span></a></li>
      <li><a href="namespaces.htm"><span>Namespaces</span></a></li>
      <li><a href="annotated.htm"><span>Classes</span></a></li>
      <li><a href="files.htm"><span>Files</span></a></li>
      <li><a href="examples.htm"><span>Examples</span></a></li>
      <li>
        <div id="MSearchBox" class="MSearchBoxInactive">
        <span class="left">
          <img id="MSearchSelect" src="search/mag_sel.png"
               onmouseover="return searchBox.OnSearchSelectShow()"
               onmouseout="return searchBox.OnSearchSelectHide()"
               alt=""/>
          <input type="text" id="MSearchField" value="Search" accesskey="S"
               onfocus="searchBox.OnSearchFieldFocus(true)" 
               onblur="searchBox.OnSearchFieldFocus(false)" 
               onkeyup="searchBox.OnSearchFieldChange(event)"/>
          </span><span class="right">
            <a id="MSearchClose" href="javascript:searchBox.CloseResultsWindow()"><img id="MSearchCloseImg" border="0" src="search/close.png" alt=""/></a>
          </span>
        </div>
      </li>
    </ul>
  </div>
</div><!-- top -->
<!-- window showing the filter options -->
<div id="MSearchSelectWindow"
     onmouseover="return searchBox.OnSearchSelectShow()"
     onmouseout="return searchBox.OnSearchSelectHide()"
     onkeydown="return searchBox.OnSearchSelectKey(event)">
</div>

<!-- iframe showing the search results (closed by default) -->
<div id="MSearchResultsWindow">
<iframe src="javascript:void(0)" frameborder="0" 
        name="MSearchResults" id="MSearchResults">
</iframe>
</div>

<div class="header">
  <div class="headertitle">
<div class="title">dictionary_compressed_column.hpp</div>  </div>
</div><!--header-->
<div class="contents">
<p>This is an example of how to implement a compression technique in our framework. One has to inherit from an abstract base class <a class="el" href="classCoGaDB_1_1CompressedColumn.htm" title="This class represents a compressed column with type T, is the base class for all compressed typed col...">CoGaDB::CompressedColumn</a> and implement the pure virtual methods.</p>
<div class="fragment"><div class="line"></div><div class="line"><span class="preprocessor">#pragma once</span></div><div class="line"></div><div class="line"><span class="preprocessor">#include &lt;<a class="code" href="compressed__column_8hpp.htm">core/compressed_column.hpp</a>&gt;</span></div><div class="line"><span class="keyword">using namespace </span><a class="code" href="namespacestd.htm">std</a>;</div><div class="line"></div><div class="line"><span class="keyword">namespace </span><a class="code" href="namespaceCoGaDB.htm">CoGaDB</a>{</div><div class="line">        </div><div class="line"></div><div class="line"><span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div><div class="line"><span class="keyword">class </span>DictionaryCompressedColumn : <span class="keyword">public</span> CompressedColumn&lt;T&gt;{</div><div class="line">        <span class="keyword">public</span>:</div><div class="line">        <span class="comment">/***************** constructors and destructor *****************/</span></div><div class="line">        DictionaryCompressedColumn(<span class="keyword">const</span> std::string&amp; name, <a name="a0"></a><a class="code" href="namespaceCoGaDB.htm#ac53a708d27568a6584e7c03b4ab659e5">AttributeType</a> db_type);</div><div class="line">        <span class="keyword">virtual</span> ~DictionaryCompressedColumn();</div><div class="line"></div><div class="line">        <span class="keyword">virtual</span> <span class="keywordtype">bool</span> insert(<span class="keyword">const</span> boost::any&amp; new_Value);</div><div class="line">        <span class="keyword">virtual</span> <span class="keywordtype">bool</span> insert(<span class="keyword">const</span> T&amp; new_value);</div><div class="line">        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> InputIterator&gt;</div><div class="line">        <span class="keywordtype">bool</span> insert(InputIterator first, InputIterator last);</div><div class="line"></div><div class="line">        <span class="keyword">virtual</span> <span class="keywordtype">bool</span> update(<a name="a1"></a><a class="code" href="namespaceCoGaDB.htm#a87401571c18eb717e2135969e67a0cf2">TID</a> tid, <span class="keyword">const</span> boost::any&amp; new_value);</div><div class="line">        <span class="keyword">virtual</span> <span class="keywordtype">bool</span> update(<a name="a2"></a><a class="code" href="namespaceCoGaDB.htm#ae7e30b13ad239f7010ad333125321e9a">PositionListPtr</a> tid, <span class="keyword">const</span> boost::any&amp; new_value);  </div><div class="line">        </div><div class="line">        <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <span class="keyword">remove</span>(<a class="code" href="namespaceCoGaDB.htm#a87401571c18eb717e2135969e67a0cf2">TID</a> tid);</div><div class="line">        <span class="comment">//assumes tid list is sorted ascending</span></div><div class="line">        <span class="keyword">virtual</span> <span class="keywordtype">bool</span> <span class="keyword">remove</span>(<a class="code" href="namespaceCoGaDB.htm#ae7e30b13ad239f7010ad333125321e9a">PositionListPtr</a> tid);</div><div class="line">        <span class="keyword">virtual</span> <span class="keywordtype">bool</span> clearContent();</div><div class="line"></div><div class="line">        <span class="keyword">virtual</span> <span class="keyword">const</span> boost::any <span class="keyword">get</span>(<a class="code" href="namespaceCoGaDB.htm#a87401571c18eb717e2135969e67a0cf2">TID</a> tid);</div><div class="line">        <span class="comment">//virtual const boost::any* const getRawData()=0;</span></div><div class="line">        <span class="keyword">virtual</span> <span class="keywordtype">void</span> print() <span class="keyword">const</span> <span class="keywordflow">throw</span>();</div><div class="line">        <span class="keyword">virtual</span> <span class="keywordtype">size_t</span> size() <span class="keyword">const</span> <span class="keywordflow">throw</span>();</div><div class="line">        <span class="keyword">virtual</span> <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> getSizeinBytes() <span class="keyword">const</span> <span class="keywordflow">throw</span>();</div><div class="line"></div><div class="line">        <span class="keyword">virtual</span> <span class="keyword">const</span> <a name="a3"></a><a class="code" href="namespaceCoGaDB.htm#a3d7ce6ae5ca4381f2b4f1db23f982c5d">ColumnPtr</a> copy() <span class="keyword">const</span>;</div><div class="line"></div><div class="line">        <span class="keyword">virtual</span> <span class="keywordtype">bool</span> store(<span class="keyword">const</span> std::string&amp; path);</div><div class="line">        <span class="keyword">virtual</span> <span class="keywordtype">bool</span> load(<span class="keyword">const</span> std::string&amp; path);</div><div class="line"></div><div class="line"></div><div class="line">        </div><div class="line">        <span class="keyword">virtual</span> T&amp; operator[](<span class="keyword">const</span> <span class="keywordtype">int</span> index);</div><div class="line">        </div><div class="line">        std::vector&lt;int&gt; dc_vector;</div><div class="line">        std::vector&lt;T&gt; dictionary;</div><div class="line">};</div><div class="line"></div><div class="line"></div><div class="line"><span class="comment">/***************** Start of Implementation Section ******************/</span></div><div class="line"></div><div class="line">        </div><div class="line">        <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div><div class="line">        DictionaryCompressedColumn&lt;T&gt;::DictionaryCompressedColumn(<span class="keyword">const</span> std::string&amp; name, <a class="code" href="namespaceCoGaDB.htm#ac53a708d27568a6584e7c03b4ab659e5">AttributeType</a> db_type) : CompressedColumn&lt;T&gt;(name, db_type), dc_vector(), dictionary(){</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div><div class="line">        DictionaryCompressedColumn&lt;T&gt;::~DictionaryCompressedColumn(){</div><div class="line"></div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div><div class="line">        <span class="keywordtype">bool</span> DictionaryCompressedColumn&lt;T&gt;::insert(<span class="keyword">const</span> boost::any&amp; new_value){</div><div class="line">                <span class="keywordflow">if</span>(new_value.empty()) <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line">                <span class="keywordflow">if</span>(<span class="keyword">typeid</span>(T)==new_value.type()){</div><div class="line">                         T value = boost::any_cast&lt;T&gt;(new_value);</div><div class="line">                         <span class="keywordflow">return</span> this-&gt;insert(value);</div><div class="line">                }</div><div class="line">                </div><div class="line">                </div><div class="line">                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div><div class="line">        <span class="keywordtype">bool</span> DictionaryCompressedColumn&lt;T&gt;::insert(<span class="keyword">const</span> T&amp; new_value){</div><div class="line">                </div><div class="line">                <span class="keywordtype">unsigned</span> pos;</div><div class="line">                pos = find(dictionary.begin(), dictionary.end(), new_value) - dictionary.begin();</div><div class="line">                <span class="keywordflow">if</span>(pos &lt; dictionary.size())</div><div class="line">                {</div><div class="line">                        dc_vector.push_back(pos);</div><div class="line">                }</div><div class="line">                <span class="keywordflow">else</span>            </div><div class="line">                {</div><div class="line">                        dictionary.push_back(new_value);</div><div class="line">                        dc_vector.push_back(dictionary.size() - 1);</div><div class="line">                }       </div><div class="line">                <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line">        }</div><div class="line">        </div><div class="line">        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> T&gt; </div><div class="line">        <span class="keyword">template</span> &lt;<span class="keyword">typename</span> InputIterator&gt;</div><div class="line">        <span class="keywordtype">bool</span> DictionaryCompressedColumn&lt;T&gt;::insert(InputIterator first, InputIterator last){</div><div class="line">                </div><div class="line">                <span class="keywordflow">for</span> (InputIterator it=first; it != last; ++it)</div><div class="line">                {</div><div class="line">                        <span class="keywordflow">if</span> (!this-&gt;insert(*it))</div><div class="line">                        {</div><div class="line">                                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line">                        }</div><div class="line">                }</div><div class="line">                </div><div class="line">                <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div><div class="line">        <span class="keyword">const</span> boost::any DictionaryCompressedColumn&lt;T&gt;::get(<a class="code" href="namespaceCoGaDB.htm#a87401571c18eb717e2135969e67a0cf2">TID</a> tid){</div><div class="line">                </div><div class="line">                <span class="keywordflow">if</span>(tid&lt;dc_vector.size())</div><div class="line">                {</div><div class="line">                        </div><div class="line">                        <span class="keywordflow">return</span> boost::any(dictionary[dc_vector[tid]]);</div><div class="line">                }</div><div class="line">                <span class="keywordflow">else</span>{</div><div class="line">                        std::cout &lt;&lt; <span class="stringliteral">&quot;fatal Error!!! Invalid TID!!! Attribute: &quot;</span> &lt;&lt; this-&gt;name_ &lt;&lt; <span class="stringliteral">&quot; TID: &quot;</span> &lt;&lt; tid  &lt;&lt; std::endl;</div><div class="line">                }</div><div class="line">                <span class="keywordflow">return</span> boost::any();</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div><div class="line">        <span class="keywordtype">void</span> DictionaryCompressedColumn&lt;T&gt;::print() <span class="keyword">const</span> <span class="keywordflow">throw</span>(){</div><div class="line">                </div><div class="line">                std::cout &lt;&lt; <span class="stringliteral">&quot;| &quot;</span> &lt;&lt; this-&gt;name_ &lt;&lt; <span class="stringliteral">&quot; |&quot;</span> &lt;&lt; std::endl;</div><div class="line">                std::cout &lt;&lt; <span class="stringliteral">&quot;________________________&quot;</span> &lt;&lt; std::endl;</div><div class="line">                <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> i=0;i&lt;dc_vector.size();i++){</div><div class="line">                        std::cout &lt;&lt; <span class="stringliteral">&quot;| &quot;</span> &lt;&lt; dc_vector[i] &lt;&lt; <span class="stringliteral">&quot; |&quot;</span> &lt;&lt; std::endl;</div><div class="line">                }</div><div class="line">        }</div><div class="line">        <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div><div class="line">        <span class="keywordtype">size_t</span> DictionaryCompressedColumn&lt;T&gt;::size() <span class="keyword">const</span> <span class="keywordflow">throw</span>(){</div><div class="line"></div><div class="line">                <span class="keywordflow">return</span> dc_vector.size();</div><div class="line">        }</div><div class="line">        <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div><div class="line">        <span class="keyword">const</span> <a class="code" href="namespaceCoGaDB.htm#a3d7ce6ae5ca4381f2b4f1db23f982c5d">ColumnPtr</a> DictionaryCompressedColumn&lt;T&gt;::copy()<span class="keyword"> const</span>{</div><div class="line"></div><div class="line">                <span class="keywordflow">return</span> <a class="code" href="namespaceCoGaDB.htm#a3d7ce6ae5ca4381f2b4f1db23f982c5d">ColumnPtr</a>(<span class="keyword">new</span> DictionaryCompressedColumn&lt;T&gt;(*<span class="keyword">this</span>));</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div><div class="line">        <span class="keywordtype">bool</span> DictionaryCompressedColumn&lt;T&gt;::update(<a class="code" href="namespaceCoGaDB.htm#a87401571c18eb717e2135969e67a0cf2">TID</a> tid, <span class="keyword">const</span> boost::any&amp; new_value){</div><div class="line">                </div><div class="line">                <span class="keywordflow">if</span>(new_value.empty()) <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line">                <span class="keywordflow">if</span>(<span class="keyword">typeid</span>(T)==new_value.type()){</div><div class="line">                        T value = boost::any_cast&lt;T&gt;(new_value);</div><div class="line">                        <span class="keywordtype">unsigned</span> pos;</div><div class="line">                        pos = find(dictionary.begin(), dictionary.end(), value) - dictionary.begin();</div><div class="line">                        <span class="keywordflow">if</span>(pos &lt; dictionary.size())</div><div class="line">                        {</div><div class="line">                                dc_vector[tid] = pos;</div><div class="line">                        }</div><div class="line">                        <span class="keywordflow">else</span>            </div><div class="line">                        {</div><div class="line">                                dictionary.push_back(value);</div><div class="line">                                dc_vector[tid] = (dictionary.size() - 1);</div><div class="line">                        }</div><div class="line">                        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line">                }<span class="keywordflow">else</span>{</div><div class="line">                        std::cout &lt;&lt; <span class="stringliteral">&quot;Fatal Error!!! Typemismatch for column &quot;</span> &lt;&lt; this-&gt;name_ &lt;&lt; std::endl; </div><div class="line">                }</div><div class="line">                </div><div class="line">                <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div><div class="line">        <span class="keywordtype">bool</span> DictionaryCompressedColumn&lt;T&gt;::update(<a class="code" href="namespaceCoGaDB.htm#ae7e30b13ad239f7010ad333125321e9a">PositionListPtr</a> tids, <span class="keyword">const</span> boost::any&amp; new_value){  </div><div class="line">                <span class="keywordflow">if</span>(!tids)</div><div class="line">                        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line">                <span class="keywordflow">if</span>(new_value.empty()) <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line">                <span class="keywordflow">if</span>(<span class="keyword">typeid</span>(T)==new_value.type()){                 </div><div class="line">                        T value = boost::any_cast&lt;T&gt;(new_value);</div><div class="line">                        <span class="keywordtype">unsigned</span> size = dc_vector.size();</div><div class="line">                        vector&lt;T&gt; dictionary_ = dictionary;</div><div class="line">                        vector&lt;int&gt; dc_vector_ = dc_vector;</div><div class="line">                        clearContent();</div><div class="line"></div><div class="line">                        <span class="keywordflow">for</span>(<span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> <span class="keywordtype">id</span>=0;<span class="keywordtype">id</span>&lt;tids-&gt;size();<span class="keywordtype">id</span>++){</div><div class="line">                                <a class="code" href="namespaceCoGaDB.htm#a87401571c18eb717e2135969e67a0cf2">TID</a> tid=(*tids)[id];</div><div class="line">                                <span class="keywordflow">for</span>(<a class="code" href="namespaceCoGaDB.htm#a87401571c18eb717e2135969e67a0cf2">TID</a> i = 0; i &lt; size; i ++)  {</div><div class="line">                                        <span class="keywordflow">if</span>(i!=tid) {</div><div class="line">                                                this-&gt;insert(dictionary_[dc_vector_[i]]);</div><div class="line">                                        }</div><div class="line">                                        <span class="keywordflow">else</span></div><div class="line">                                                this-&gt;insert(value);</div><div class="line">                                }</div><div class="line">                        }</div><div class="line">                        <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line">                }<span class="keywordflow">else</span>{</div><div class="line">                        std::cout &lt;&lt; <span class="stringliteral">&quot;Fatal Error!!! Typemismatch for column &quot;</span> &lt;&lt; this-&gt;name_ &lt;&lt; std::endl; </div><div class="line">                }</div><div class="line">                </div><div class="line">                <span class="keywordflow">return</span> <span class="keyword">false</span>;           </div><div class="line">        }</div><div class="line">        </div><div class="line">        <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div><div class="line">        <span class="keywordtype">bool</span> DictionaryCompressedColumn&lt;T&gt;::remove(<a class="code" href="namespaceCoGaDB.htm#a87401571c18eb717e2135969e67a0cf2">TID</a> tid){</div><div class="line">                dc_vector.erase(dc_vector.begin()+tid);</div><div class="line">        </div><div class="line">                <span class="keywordflow">return</span> <span class="keyword">true</span>;    </div><div class="line">        }</div><div class="line">        </div><div class="line">        <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div><div class="line">        <span class="keywordtype">bool</span> DictionaryCompressedColumn&lt;T&gt;::remove(<a class="code" href="namespaceCoGaDB.htm#ae7e30b13ad239f7010ad333125321e9a">PositionListPtr</a> tids){</div><div class="line">        </div><div class="line">                <span class="keywordflow">if</span>(!tids)</div><div class="line">                        <span class="keywordflow">return</span> <span class="keyword">false</span>;</div><div class="line">                <span class="comment">//test whether tid list has at least one element, if not, return with error</span></div><div class="line">                <span class="keywordflow">if</span>(tids-&gt;empty())</div><div class="line">                        <span class="keywordflow">return</span> <span class="keyword">false</span>;           </div><div class="line"></div><div class="line">                <span class="keyword">typename</span> PositionList::reverse_iterator rit;</div><div class="line"></div><div class="line">                <span class="comment">//delete tuples in reverse order, otherwise the first deletion would invalidate all other tids</span></div><div class="line">                <span class="keywordflow">for</span> (rit = tids-&gt;rbegin(); rit!=tids-&gt;rend(); ++rit)</div><div class="line">                        dc_vector.erase(dc_vector.begin()+(*rit));</div><div class="line">                        </div><div class="line">                <span class="keywordflow">return</span> <span class="keyword">true</span>;                    </div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div><div class="line">        <span class="keywordtype">bool</span> DictionaryCompressedColumn&lt;T&gt;::clearContent(){</div><div class="line">        </div><div class="line">                dc_vector.clear();</div><div class="line">                dictionary.clear();</div><div class="line">                <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div><div class="line">        <span class="keywordtype">bool</span> DictionaryCompressedColumn&lt;T&gt;::store(<span class="keyword">const</span> std::string&amp; path_){</div><div class="line">                std::string path(path_);</div><div class="line">                path += <span class="stringliteral">&quot;/&quot;</span>;</div><div class="line">                path += this-&gt;name_;</div><div class="line">                std::ofstream outfile (path.c_str(),std::ios_base::binary | std::ios_base::out);</div><div class="line">                boost::archive::binary_oarchive oa(outfile);</div><div class="line"></div><div class="line">                oa &lt;&lt; dc_vector;</div><div class="line"></div><div class="line">                outfile.flush();</div><div class="line">                outfile.close();</div><div class="line"></div><div class="line">                std::string path2(path_);</div><div class="line">                path2 += <span class="stringliteral">&quot;/dict&quot;</span>;</div><div class="line">                path2 += this-&gt;name_;</div><div class="line">                std::ofstream outfile2 (path2.c_str(),std::ios_base::binary | std::ios_base::out);</div><div class="line">                boost::archive::binary_oarchive oa2(outfile2);</div><div class="line"></div><div class="line">                oa2 &lt;&lt; dictionary;</div><div class="line"></div><div class="line">                outfile2.flush();</div><div class="line">                outfile2.close();</div><div class="line">                </div><div class="line">                <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line">        }</div><div class="line">        <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div><div class="line">        <span class="keywordtype">bool</span> DictionaryCompressedColumn&lt;T&gt;::load(<span class="keyword">const</span> std::string&amp; path_){</div><div class="line">        </div><div class="line">                std::string path(path_);</div><div class="line">                path += <span class="stringliteral">&quot;/&quot;</span>;</div><div class="line">                path += this-&gt;name_;</div><div class="line">                </div><div class="line">                std::ifstream infile (path.c_str(),std::ios_base::binary | std::ios_base::in);</div><div class="line">                boost::archive::binary_iarchive ia(infile);</div><div class="line">                ia &gt;&gt; dc_vector;</div><div class="line">                infile.close();</div><div class="line"></div><div class="line">                std::string path2(path_);</div><div class="line">                path2 += <span class="stringliteral">&quot;/dict&quot;</span>;</div><div class="line">                path2 += this-&gt;name_;</div><div class="line">        </div><div class="line">                std::ifstream infile2 (path2.c_str(),std::ios_base::binary | std::ios_base::in);</div><div class="line">                boost::archive::binary_iarchive ia2(infile2);</div><div class="line">                ia2 &gt;&gt; dictionary;</div><div class="line">                infile2.close();</div><div class="line">                <span class="keywordflow">return</span> <span class="keyword">true</span>;</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div><div class="line">        T&amp; DictionaryCompressedColumn&lt;T&gt;::operator[](<span class="keyword">const</span> <span class="keywordtype">int</span> index){</div><div class="line">                <span class="keywordflow">return</span> dictionary[dc_vector[index]];</div><div class="line">        }</div><div class="line"></div><div class="line">        <span class="keyword">template</span>&lt;<span class="keyword">class</span> T&gt;</div><div class="line">        <span class="keywordtype">unsigned</span> <span class="keywordtype">int</span> DictionaryCompressedColumn&lt;T&gt;::getSizeinBytes() <span class="keyword">const</span> <span class="keywordflow">throw</span>(){</div><div class="line">                <span class="keywordflow">return</span> dc_vector.capacity()*<span class="keyword">sizeof</span>(T);</div><div class="line">        }</div><div class="line"></div><div class="line"><span class="comment">/***************** End of Implementation Section ******************/</span></div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">}; <span class="comment">//end namespace CogaDB</span></div><div class="line"></div></div><!-- fragment --> </div><!-- contents -->
<!-- start footer part -->
<hr class="footer"/><address class="footer"><small>
Generated on Thu Jun 8 2017 13:20:27 for Database Implementation Techniques Programming Task SoSe2015 by &#160;<a href="http://www.doxygen.org/index.html">
<img class="footer" src="doxygen.png" alt="doxygen"/>
</a> 1.8.11
</small></address>
</body>
</html>
